name: Build Webapp AMI

on:
  push:
    branches: [ main ]

jobs:
  build:
    # This condition ensures the workflow only runs on the main repository, not on forks
    if: github.repository == 'CSYE-6225-shalom/webapp'
    runs-on: ubuntu-latest
    services:
        postgres:
          image: postgres:latest
          env:
            POSTGRES_DB: postgres   # Using default database with default user 
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Create a new PostgreSQL user
      env:
        PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      run: |
        psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d postgres -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"
        psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d postgres -c "ALTER USER ${{ secrets.DB_USER }} WITH SUPERUSER;"

    - name: 'Create env file'
      run: |
        touch .env
        echo DB_USER=${{ secrets.DB_USER }} >> .env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
        echo DB_HOST=${{ secrets.DB_HOST }} >> .env
        echo DB_NAME=${{ secrets.DB_NAME }} >> .env
        echo DB_PORT=${{ secrets.DB_PORT }} >> .env
        echo PORT=${{ secrets.APP_PORT }} >> .env
        cat .env 

    - name: Run integration tests
      run: pytest tests/test_integration.py --cov=app --cov-report=xml

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: '1.8.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Packer Init
      run: packer init .
      continue-on-error: false

    - name: Packer Validate
      env:
        DEV_DEFAUTLT_VPC_ID: ${{ secrets.DEV_DEFAUTLT_VPC_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
      run: |
        packer validate \
          -var "DEV_DEFAUTLT_VPC_ID=$DEV_DEFAUTLT_VPC_ID" \
          -var "AWS_REGION=$AWS_REGION" \
          -var "AWS_DEMO_ACCOUNT_ID=$AWS_DEMO_ACCOUNT_ID" \
          .

    - name: Packer Build AMI in the Dev account
      id: packer-build
      env:
        DEV_DEFAUTLT_VPC_ID: ${{ secrets.DEV_DEFAUTLT_VPC_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
      run: |
        packer build \
          -var "DEV_DEFAUTLT_VPC_ID=$DEV_DEFAUTLT_VPC_ID" \
          -var "AWS_REGION=$AWS_REGION" \
          -var "AWS_DEMO_ACCOUNT_ID=$AWS_DEMO_ACCOUNT_ID" \
          -machine-readable \
          webapp-ami.pkr.hcl | awk -F, '$0 ~ /artifact,0,id/ {print $6}' | tail -1)
        echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
      continue-on-error: false

    - name: Configure AWS CLI for Demo Account
      run: |
        aws configure set aws_access_key_id ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
        aws configure set region ${{ secrets.AWS_REGION }}

    - name: Update Launch Template with new AMI ID
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        LAUNCH_TEMPLATE_NAME: "csye6225_asg"
      run: |
        aws ec2 create-launch-template-version \
          --launch-template-name $LAUNCH_TEMPLATE_NAME \
          --source-version '$Latest' \
          --launch-template-data "{\"ImageId\":\"${{ steps.packer-build.outputs.ami_id }}\"}"

    - name: Start Instance Refresh for Auto Scaling Group
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AUTOSCALING_GROUP_NAME: "dev-asg"
      run: |
        INSTANCE_REFRESH_ID=$(aws autoscaling start-instance-refresh \
          --auto-scaling-group-name $AUTOSCALING_GROUP_NAME \
          --strategy Rolling \
          --query 'InstanceRefreshId' \
          --output text)
        echo "instance_refresh_id=$INSTANCE_REFRESH_ID" >> $GITHUB_OUTPUT

    - name: Wait for Instance Refresh to complete
      env:
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AUTOSCALING_GROUP_NAME: "dev-asg"
      run: |
        while true; do
          STATUS=$(aws autoscaling describe-instance-refreshes \
            --auto-scaling-group-name $AUTOSCALING_GROUP_NAME \
            --instance-refresh-ids $INSTANCE_REFRESH_ID \
            --query 'InstanceRefreshes[0].Status' \
            --output text)
          
          case $STATUS in
            Pending|InProgress)
              echo "Instance refresh in progress..."
              sleep 30
              ;;
            Successful)
              echo "Instance refresh completed successfully"
              exit 0
              ;;
            Failed)
              echo "Instance refresh failed"
              exit 1
              ;;
            *)
              echo "Unknown status: $STATUS"
              exit 1
              ;;
          esac
        done
