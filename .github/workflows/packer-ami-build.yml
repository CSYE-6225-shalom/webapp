name: Build Webapp AMI

on:
  push:
    branches: [ a07-test ]

jobs:
  build:
    # This condition ensures the workflow only runs on the main repository, not on forks
    if: github.repository == 'CSYE-6225-shalom/webapp'
    runs-on: ubuntu-latest
    services:
        postgres:
          image: postgres:latest
          env:
            POSTGRES_DB: postgres   # Using default database with default user 
            POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.9
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Create a new PostgreSQL user
      env:
        PGPASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      run: |
        psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d postgres -c "CREATE USER ${{ secrets.DB_USER }} WITH PASSWORD '${{ secrets.DB_PASSWORD }}';"
        psql -h localhost -U ${{ secrets.POSTGRES_USER }} -d postgres -c "ALTER USER ${{ secrets.DB_USER }} WITH SUPERUSER;"

    - name: 'Create env file'
      run: |
        touch .env
        echo DB_USER=${{ secrets.DB_USER }} >> .env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
        echo DB_HOST=${{ secrets.DB_HOST }} >> .env
        echo DB_NAME=${{ secrets.DB_NAME }} >> .env
        echo DB_PORT=${{ secrets.DB_PORT }} >> .env
        echo PORT=${{ secrets.APP_PORT }} >> .env
        cat .env 

    - name: Run integration tests
      run: pytest tests/test_integration.py --cov=app --cov-report=xml

    - name: Setup Packer
      uses: hashicorp/setup-packer@main
      with:
        version: '1.8.0'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Packer Init
      run: packer init .
      continue-on-error: false

    - name: Packer Validate
      env:
        DEV_DEFAUTLT_VPC_ID: ${{ secrets.DEV_DEFAUTLT_VPC_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
      run: |
        packer validate \
          -var "DEV_DEFAUTLT_VPC_ID=$DEV_DEFAUTLT_VPC_ID" \
          -var "AWS_REGION=$AWS_REGION" \
          -var "AWS_DEMO_ACCOUNT_ID=$AWS_DEMO_ACCOUNT_ID" \
          .

    - name: Packer Build AMI
      env:
        DEV_DEFAUTLT_VPC_ID: ${{ secrets.DEV_DEFAUTLT_VPC_ID }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
      run: |
        packer build \
          -var "DEV_DEFAUTLT_VPC_ID=$DEV_DEFAUTLT_VPC_ID" \
          -var "AWS_REGION=$AWS_REGION" \
          -var "AWS_DEMO_ACCOUNT_ID=$AWS_DEMO_ACCOUNT_ID" \
          webapp-ami.pkr.hcl
      continue-on-error: false
