name: Python Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  python-ci-checks:
    runs-on: ubuntu-latest
    services:
        postgres:
          image: postgres:latest
          env:
            POSTGRES_DB: postgres        
            POSTGRES_PASSWORD: postgres
            POSTGRES_USER: postgres
          ports:
            - 5432:5432
          options: >-
            --health-cmd pg_isready
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
    # services:
    #     postgres:
    #       image: postgres:latest
    #       ports:
    #         - 5432:5432
    #       env:
    #         POSTGRES_DB: ${{ secrets.DB_NAME }}
    #         POSTGRES_USER: ${{ secrets.DB_USER }}
    #         POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
    #       options: >-
    #         --health-cmd="pg_isready -U user"
    #         --health-interval=10s
    #         --health-timeout=5s
    #         --health-retries=5

    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Create a new PostgreSQL user
      run: |
        export PGPASSWORD='postgres'
        psql -h localhost -U postgres -d postgres -c "CREATE USER shalomlabs WITH PASSWORD 'csye6225';"
        psql -h localhost -U postgres -d postgres -c "ALTER USER shalomlabs WITH SUPERUSER;"

    - name: 'Create env file'
      run: |
        touch .env
        echo DB_USER=${{ secrets.DB_USER }} >> .env
        echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
        echo DB_HOST=${{ secrets.DB_HOST }} >> .env
        echo DB_NAME=${{ secrets.DB_NAME }} >> .env
        echo DB_PORT=${{ secrets.DB_PORT }} >> .env
        cat .env   

    - name: Run unit tests
      run: pytest tests/test_unit.py --cov=app --cov-report=xml

    - name: Run integration tests
      env:
        DB_USERNAME: ${{ secrets.DB_USERNAME }}
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        DB_HOST: ${{ secrets.DB_HOST }}
        DB_NAME: ${{ secrets.DB_NAME }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: pytest tests/test_integration.py --cov=app --cov-report=xml --cov-append
